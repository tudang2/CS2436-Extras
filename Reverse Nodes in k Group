/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if (!head || k == 1) return head;

        ListNode dummy(0);
        dummy.next = head;
        ListNode* prevGroup = &dummy;

        while (true) {
            ListNode* end = prevGroup;
            for (int i = 0; i < k && end; i++) end = end->next;
            if (!end) break;

            ListNode* start = prevGroup->next;
            ListNode* nextGroup = end->next;

            ListNode* prev = nextGroup;
            ListNode* curr = start;
            while (curr != nextGroup) {
                ListNode* tmp = curr->next;
                curr->next = prev;
                prev = curr;
                curr = tmp;
            }

            prevGroup->next = end;
            prevGroup = start;
        }

        return dummy.next;
    }
};
