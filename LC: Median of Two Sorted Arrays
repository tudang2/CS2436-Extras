class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        if (nums1.size() > nums2.size()) 
            return findMedianSortedArrays(nums2, nums1);

        int m = nums1.size();
        int n = nums2.size();
        int total = m + n;
        int half = total / 2;

        int left = 0, right = m;

        while (true) {
            int i = (left + right) / 2;     
            int j = half - i;               

            int left1 = (i > 0) ? nums1[i - 1] : INT_MIN;
            int right1 = (i < m) ? nums1[i] : INT_MAX;
            int left2 = (j > 0) ? nums2[j - 1] : INT_MIN;
            int right2 = (j < n) ? nums2[j] : INT_MAX;

            if (left1 <= right2 && left2 <= right1) {
                if (total % 2 == 0) {
                    return (max(left1, left2) + min(right1, right2)) / 2.0;
                } else {
                    return min(right1, right2);
                }
            } 
            else if (left1 > right2) {
                right = i - 1; 
            } 
            else {
                left = i + 1;
            }
        }
    }

    int main() {
        vector<int> nums1 = {1, 2};
        vector<int> nums2 = {3, 4};

        cout << findMedianSortedArrays(nums1, nums2) << endl;
        return 0;
    }
};
